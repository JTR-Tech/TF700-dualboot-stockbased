From 8e70473c51756323ad32e6b19291c1fe809517b6 Mon Sep 17 00:00:00 2001
From: that <github@that.at>
Date: Thu, 5 Sep 2013 00:09:39 +0200
Subject: [PATCH 19/21] cpu-tegra: oc edp fixes

---
 arch/arm/mach-tegra/cpu-tegra.c | 72 +++++++++--------------------------------
 1 file changed, 16 insertions(+), 56 deletions(-)

diff --git a/arch/arm/mach-tegra/cpu-tegra.c b/arch/arm/mach-tegra/cpu-tegra.c
index e0b3e52..0559b5c 100644
--- a/arch/arm/mach-tegra/cpu-tegra.c
+++ b/arch/arm/mach-tegra/cpu-tegra.c
@@ -72,7 +72,6 @@ static unsigned long target_cpu_speed[CONFIG_NR_CPUS];
 static DEFINE_MUTEX(tegra_cpu_lock);
 static bool is_suspended;
 static int suspend_index;
-static bool edp_enable = 0;
 static bool force_policy_max;
  int  gps_enable=0;
 
@@ -351,7 +350,7 @@ module_param_cb(enable_pwr_save, &tegra_pwr_save_ops, &pwr_save, 0644);
 
 static unsigned int cpu_user_cap;
 
-/*static inline void _cpu_user_cap_set_locked(void)
+static inline void _cpu_user_cap_set_locked(void)
 {
 #ifndef CONFIG_TEGRA_CPU_CAP_EXACT_FREQ
 	if (cpu_user_cap != 0) {
@@ -375,7 +374,7 @@ void tegra_cpu_user_cap_set(unsigned int speed_khz)
 	_cpu_user_cap_set_locked();
 
 	mutex_unlock(&tegra_cpu_lock);
-}*/
+}
 
 static int cpu_user_cap_set(const char *arg, const struct kernel_param *kp)
 {
@@ -384,21 +383,8 @@ static int cpu_user_cap_set(const char *arg, const struct kernel_param *kp)
 	mutex_lock(&tegra_cpu_lock);
 
 	ret = param_set_uint(arg, kp);
-	if (ret == 0) {
-#ifndef CONFIG_TEGRA_CPU_CAP_EXACT_FREQ
-		if (cpu_user_cap != 0) {
-			int i;
-			for (i = 0; freq_table[i].frequency !=
-				CPUFREQ_TABLE_END; i++) {
-				if (freq_table[i].frequency > cpu_user_cap)
-					break;
-			}
-			i = (i == 0) ? 0 : i - 1;
-			cpu_user_cap = freq_table[i].frequency;
-		}
-#endif
-		tegra_cpu_set_speed_cap(NULL);
-	}
+	if (ret == 0)
+		_cpu_user_cap_set_locked();
 
 	mutex_unlock(&tegra_cpu_lock);
 	return ret;
@@ -466,6 +452,12 @@ static unsigned int edp_predict_limit(unsigned int cpus)
 		limit = min(limit, system_edp_limits[cpus - 1]);
 	limit = min(limit, pwr_cap_limits[cpus - 1]);//pwr save
 
+    if( system_mode == SYSTEM_OVERCLOCK_1P5G_MODE && cpu_edp_limits[edp_thermal_index].temperature > 25 && cpu_edp_limits[edp_thermal_index].temperature < 65 )
+	{
+		/* override EDP limits */
+		limit = 1800000;
+	}
+
 	return limit;
 }
 
@@ -502,17 +494,6 @@ int tegra_edp_update_thermal_zone(int temperature)
 	int nlimits = cpu_edp_limits_size;
 	int index;
 
-#ifdef ASUS_OVERCLOCK
-	if (temperature >= 70 && temperature < 85) {
-		if (!edp_enable)
-			printk("enabling edp, temperature=%d\n", temperature);
-		edp_enable = 1;
-	} else {
-		if (edp_enable)
-			printk("disabling edp, temperature=%d\n", temperature);
-		edp_enable = 0;
-	}
-#endif
 
 	if (!cpu_edp_limits)
 		return -EINVAL;
@@ -720,11 +701,11 @@ module_param_cb(pwr_cap_limit_4, &pwr_cap_ops, &pwr_cap_limits[3], 0644);
 static int pwr_mode_table_debugfs_show(struct seq_file *s, void *data)
 {
 	seq_printf(s, "-- CPU power mode table --\n");
-	seq_printf(s, "Power Saving=%u \n Balanced=%u \n Normal=%u \n Over 1=%u\n",
+	seq_printf(s, "Power Saving=%u \n Balanced=%u \n Normal=%u \n Overclocked=%u\n",
 			   power_mode_table[2],
 			   power_mode_table[1],
 			   power_mode_table[0],
-                           power_mode_table[3]);
+               power_mode_table[3]);
 	return 0;
 }
 
@@ -787,9 +768,9 @@ static int __init tegra_cpu_debug_init(void)
 
 	if (tegra_edp_debug_init(cpu_tegra_debugfs_root))
 		goto err_out;
-     //   if (!debugfs_create_file("pwr_mode_table", 0644, cpu_tegra_debugfs_root,
-	//	 NULL, &pwr_mode_table_debugfs_fops))
-		//goto err_out;
+        if (!debugfs_create_file("pwr_mode_table", 0644, cpu_tegra_debugfs_root,
+		 NULL, &pwr_mode_table_debugfs_fops))
+		goto err_out;
 
 	return 0;
 
@@ -940,7 +921,7 @@ int tegra_cpu_set_speed_cap(unsigned int *speed_cap)
 
        new_speed = ASUS_governor_speed(new_speed);
 	new_speed = tegra_throttle_governor_speed(new_speed);
-	new_speed = edp_governor_speed(new_speed);
+			new_speed = edp_governor_speed(new_speed);
 	//new_speed = user_cap_speed(new_speed);
 	if (speed_cap)
 		*speed_cap = new_speed;
@@ -960,18 +941,7 @@ int tegra_suspended_target(unsigned int target_freq)
 
 	/* apply only "hard" caps */
 	new_speed = tegra_throttle_governor_speed(new_speed);
-#ifdef ASUS_OVERCLOCK
-	if(system_mode == SYSTEM_OVERCLOCK_1P5G_MODE) {
-		if(edp_enable) {
-			pr_info("%s : EDP enable\n", __func__);
 			new_speed = edp_governor_speed(new_speed);
-		} 
-	} else {
-		new_speed = edp_governor_speed(new_speed);
-	}
-#else
-	new_speed = edp_governor_speed(new_speed);
-#endif
 
 
 	return tegra_update_cpu_speed(new_speed);
@@ -991,17 +961,7 @@ int tegra_cpu_late_resume_set_speed_cap(int speed)
 
 	new_speed = ASUS_governor_speed(new_speed);
 	new_speed = tegra_throttle_governor_speed(new_speed);
-        #ifdef ASUS_OVERCLOCK
-	if(system_mode == SYSTEM_OVERCLOCK_1P5G_MODE){
-		if(edp_enable){
-			pr_info("%s : EDP enable\n", __func__);
 			new_speed = edp_governor_speed(new_speed);
-		}
-	}else
-		new_speed = edp_governor_speed(new_speed);
-	#else
-	new_speed = edp_governor_speed(new_speed);
-	#endif
 
 
 	printk("tegra_cpu_late_resume_set_speed_cap new_speed =%u\n",new_speed );
-- 
1.8.3.2

